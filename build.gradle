apply plugin: "java"
apply plugin: "com.bmuschko.cargo"
apply plugin: "war"
apply plugin: "eclipse"

apply plugin: "checkstyle"
apply plugin: "findbugs"
apply plugin: "pmd"

compileJava {
  sourceCompatibility = '1.8'
  targetCompatibility = 1.8
}

ext {
    jstlVersion = "1.2" 
    javaxServletJsp = "2.1"
    javaxServlet = "3.1.0"
    slf4jVersion = "1.7.21"
    jerseyVersion = "2.25.1"
    
    twelvemonkeys = "3.3.2"
    
    springVersion = "4.2.5.RELEASE"  
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    //providedCompile "javax.servlet:javax.servlet-api:$javaxServlet"
    //providedCompile "javax.servlet.jsp:jsp-api:$javaxServletJsp" 

    compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
    compile "commons-validator:commons-validator:1.5.1"
    
    compile "net.coobird:thumbnailator:0.4.8"
    
    //compile files("marvin/marvin_1.5.5.jar");
    //compile files("marvin/plugins/image/org.marvinproject.image.transform.scale.jar");
    
    compile "com.mortennobel:java-image-scaling:0.8.6"
    
    compile "org.imgscalr:imgscalr-lib:4.2"
    
    compile "com.twelvemonkeys.common:common-lang:$twelvemonkeys"
    compile "com.twelvemonkeys.common:common-io:$twelvemonkeys"
    compile "com.twelvemonkeys.common:common-image:$twelvemonkeys"
    compile "com.twelvemonkeys.imageio:imageio-core:$twelvemonkeys"
    compile "com.twelvemonkeys.imageio:imageio-metadata:$twelvemonkeys"
    compile "com.twelvemonkeys.imageio:imageio-bmp:$twelvemonkeys"
    compile "com.twelvemonkeys.imageio:imageio-jpeg:$twelvemonkeys"
    
    compile ("org.glassfish.jersey.ext:jersey-spring3:2.22.2")
     {
     exclude group: "org.springframework", module: "spring-core"
     exclude group: "org.springframework", module: "spring-web"
     exclude group: "org.springframework", module: "spring-beans"
     }


    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-beans:$springVersion"
    
    //compile "commons-io:commons-io:2.5"
    
    compile "com.wordnik:swagger-jersey2-jaxrs_2.10:1.3.12"

    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    runtime "javax.servlet:jstl:$jstlVersion"
}

cargo {
    containerId = 'tomcat8x'
    port = 8080

    local {
        installer {
            installUrl = "http://ftp.byfly.by/pub/apache.org/tomcat/tomcat-8/v8.0.41/bin/apache-tomcat-8.0.41-windows-x64.zip"
            downloadDir = file("$buildDir/download")
            extractDir = file("$buildDir/extract")
        }
    }
}


buildscript {
  repositories {
      jcenter()
  }
  dependencies {
    classpath "com.bmuschko:gradle-cargo-plugin:2.2.3"
  }
}


checkstyle {
    configFile = rootProject.file("tools/checkstyle/sun_checks.xml")
    ignoreFailures = true
    showViolations = true
}

checkstyleTest {
    enabled = false
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.destination rootProject.file("build/reports/checkstyle/checkstyle_report.html")
    }
}

findbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
        html.destination rootProject.file("build/reports/findbugs/findbugs_report.html")
    }
}

pmd {
    ignoreFailures = true
    consoleOutput = true
    ruleSets = ["java-basic", "java-strings", "java-braces"]
    reportsDir = file("${rootProject.rootDir}/build/reports/pmd")

}

